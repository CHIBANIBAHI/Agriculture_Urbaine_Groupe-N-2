// Jardin Intelligent (surveillance de la température, l'humidité , l'humidité du sol et la lumière)
// programme sans BUZZER
#include <TFT_eSPI.h>
#include <SoftwareSerial.h>
#include <Arduino.h>
#include <SensirionI2CSht4x.h>   //SHT40 Bib
#include <Wire.h>
#include "TFT_eSPI.h"  //TFT LCD Bib

TFT_eSPI tft;  //Initialisation TFT LCD
TFT_eSprite spr = TFT_eSprite(&tft);  //Initialisation buffer

SoftwareSerial mySerial(A0, A1); // RX, TX

SensirionI2CSht4x sht4x;

static char recv_buf[512];
static bool is_exist = false;
static bool is_join = false;

static int at_send_check_response(char *p_ack, int timeout_ms, char *p_cmd, ...)
{
  int ch;
  int num = 0;
  int index = 0;
  int startMillis = 0;
  va_list args;
  memset(recv_buf, 0, sizeof(recv_buf));
  va_start(args, p_cmd);
  mySerial.printf(p_cmd, args);
  Serial.printf(p_cmd, args);
  va_end(args);
  delay(200);
  startMillis = millis();

  if (p_ack == NULL)
  {
    return 0;
  }

  do
  {
    while (mySerial.available() > 0)
    {
      ch = mySerial.read();
      recv_buf[index++] = ch;
      Serial.print((char)ch);
      delay(2);
    }

    if (strstr(recv_buf, p_ack) != NULL)
    {
      return 1;
    }

  } while (millis() - startMillis < timeout_ms);
  return 0;
}

static void recv_prase(char *p_msg)
{
  if (p_msg == NULL)
  {
    return;
  }
  char *p_start = NULL;
  int data = 0;
  int rssi = 0;
  int snr = 0;

  p_start = strstr(p_msg, "RX");
  if (p_start && (1 == sscanf(p_start, "RX: \"%d\"\r\n", &data)))
  {
    Serial.println(data);
  }

  p_start = strstr(p_msg, "RSSI");
  if (p_start && (1 == sscanf(p_start, "RSSI %d,", &rssi)))
  {
    Serial.println(rssi);
  }

  p_start = strstr(p_msg, "SNR");
  if (p_start && (1 == sscanf(p_start, "SNR %d", &snr)))
  {
    Serial.println(snr);
  }
}

void setup(void)
{
  Serial.begin(115200);
  mySerial.begin(9600);

  Wire.begin();

  tft.begin();  //début TFT LCD
  tft.setRotation(3);  //définir rotation TFT LCD 
  spr.createSprite(TFT_HEIGHT, TFT_WIDTH); //Creation buffer

  pinMode(WIO_LIGHT, INPUT);  ///définir la pin du capteur lumière comme entrée (input)
 // pinMode(WIO_MIC, INPUT);  //définir la pin du microphone comme entrée (input)
  
  uint16_t error;
  char errorMessage[256];

  sht4x.begin(Wire);

  uint32_t serialNumber;
  error = sht4x.serialNumber(serialNumber);
  delay(5000);
  if (error) {
    Serial.print("Error trying to execute serialNumber(): ");
    errorToString(error, errorMessage, 256);
    Serial.println(errorMessage);
  } else {
    Serial.print("Serial Number: ");
    Serial.println(serialNumber);
  }

  Serial.print("E5 LORAWAN TEST\r\n");

  if (at_send_check_response("+AT: OK", 100, "AT\r\n"))
  {
    is_exist = true;
    at_send_check_response("+ID: DevEui", 1000, "AT+ID=DevEui,\"xxxxxxxxxxxxxxxx\"\r\n");
    at_send_check_response("+ID: AppEui", 1000, "AT+ID=AppEui,\"xxxxxxxxxxxxxxxx\"\r\n");
    at_send_check_response("+MODE: LWOTAA", 1000, "AT+MODE=LWOTAA\r\n");
    at_send_check_response("+DR: AS923", 1000, "AT+DR=AS923\r\n");
    at_send_check_response("+CH: NUM", 1000, "AT+CH=NUM,0-2\r\n");
    at_send_check_response("+KEY: APPKEY", 1000, "AT+KEY=APPKEY,\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\r\n");
    at_send_check_response("+CLASS: A", 1000, "AT+CLASS=A\r\n");
    at_send_check_response("+PORT: 8", 1000, "AT+PORT=8\r\n");
    delay(200);
    is_join = true;
  }
  else
  {
    is_exist = false;
    Serial.print("No E5 module found.\r\n");
  }
}

void loop(void) {
  uint16_t error;
  float temperature, humidity;
  int int_temp, int_humi;
  error = sht4x.measureHighPrecision(temperature, humidity);
  int_temp = temperature * 100;
  int_humi = humidity * 100;
  int light = analogRead(WIO_LIGHT);   //stockage des valeurs du capteur de lumière
  //int mic = (analogRead(WIO_MIC))/10;   //stockage des valeurs du microphone
///////////////
  int sensorPin = A0; //Definir variable pour stocker pin du capteur  
  int sensorValue = 0; //Definir variable pour stocker valeurs du capteur  
  sensorValue = analogRead(sensorPin); // stockage du valeurs du capteur dans la variable "sensorValue"
  //sensorValue=sensorValue*5/1023;
// setup() {
  //Serial.begin(9600); //start serial communication

/////////////////
  //paramètres d'affichages écran

  spr.fillSprite(TFT_WHITE);  //Arrèreplan Blanc
  spr.fillRect(0, 0, 320, 50, TFT_RED); //rectangle rouge
  spr.setTextColor(TFT_WHITE);  //paramètre couleur du texte
  spr.setTextSize(3);  //paramètre tailles du texte
  spr.drawString("Param_affich", 50, 15); //affichage du texte
  spr.drawFastVLine(150, 50, 190, TFT_RED); //affichage ligne verticale
  spr.drawFastHLine(0, 140, 320, TFT_RED); //affichage ligne horizontale

  // parametre affcihage pour température
  spr.setTextColor(TFT_BLACK);
  spr.setTextSize(2);
  spr.drawString("Temperature", 10, 65);
  spr.setTextSize(3);
  spr.drawNumber(temperature, 50, 95); // affichage valeurs de température
  spr.drawString("C", 90, 95);

  //parametre affcihage pour l'humidité
  spr.setTextSize(2);
  spr.drawString("Humidite", 25, 160);
  spr.setTextSize(3);
  spr.drawNumber(humidity, 30, 190); //affichage valeurs d'humidité
  spr.drawString("%RH", 70, 190);

    //parametre affcihage pour l'humidité du sol
  spr.setTextSize(2);
  spr.drawString("Hum du sol", 180, 65);
  spr.setTextSize(3);
  spr.drawNumber(sensorValue, 205, 95); //affichage valeurs d'humidité du sol
  spr.drawString("", 245, 95);

  //  //parametre affcihage pour la lumière
  spr.setTextSize(2);
  spr.drawString("Lumiere", 200, 160);
  spr.setTextSize(3);
  light = map(light, 0, 1023, 0, 100); //Map valeurs du capteur
  spr.drawNumber(light, 205, 190); //affichage valeurs du capteur en pourcentage
  spr.drawString("%", 245, 190);

  spr.pushSprite(0, 0); //Vers LCD
 
  if (is_exist) {
    int ret = 0;
    if (is_join) {
      ret = at_send_check_response("+JOIN: Network joined", 12000, "AT+JOIN\r\n");
      if (ret) {
        is_join = false;
      }
      else {
        Serial.println("");
        Serial.print("JOIN failed!\r\n\r\n");
        delay(5000);
      }
    }
    else {
      char cmd[128];
      sprintf(cmd, "AT+CMSGHEX=\"%04X %04X %04X %04X\"\r\n", int_temp, int_humi, light);
      ret = at_send_check_response("Done", 10000, cmd);
      if (ret) {
        Serial.print("Temperature: ");  Serial.print(temperature);
        Serial.println();
        Serial.print("Humidity: ");  Serial.println(humidity);
        Serial.print("Light: "); Serial.println(light);
        
        Serial.print("Soil Moisture: ");
        Serial.println(sensorValue); //Affihage valeurs du capteur
        recv_prase(recv_buf);
       
      } 
      else {
        Serial.print("Send failed!\r\n\r\n");
      }
      spr.pushSprite(0, 0); //Push to LCD
      delay(5000);
    }
  }
  else
  {
    delay(1000);
  }
}
